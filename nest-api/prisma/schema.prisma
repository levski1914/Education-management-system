// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())

  schoolId String?
  school   School? @relation(fields: [schoolId], references: [id])

  firstName  String?
  lastName   String?
  egn        String? @unique
  address    String?
  profilePic String?
  parentId   String?
  parent     User?   @relation("ParentChild", fields: [parentId], references: [id])
  children   User[]  @relation("ParentChild")

  classId    String?
  class      Classroom? @relation("ClassroomStudents", fields: [classId], references: [id])
  leadsClass Classroom? @relation("ClassroomTeacher")

  lessonsTaught Lesson[]     @relation("TeacherLessons")
  Grade         Grade[]
  Attendance    Attendance[]
}

model School {
  id        String      @id @default(uuid())
  name      String
  city      String
  createdAt DateTime    @default(now())
  users     User[]
  Classroom Classroom[]
  subjects  Subject[] // üëà –î–æ–±–∞–≤–µ–Ω–æ –∑–∞ –¥–≤—É–ø–æ—Å–æ—á–Ω–∞ —Ä–µ–ª–∞—Ü–∏—è
}

model Classroom {
  id             String  @id @default(uuid())
  name           String
  grade          Int
  letter         String
  schoolId       String
  school         School  @relation(fields: [schoolId], references: [id])
  students       User[]  @relation("ClassroomStudents")
  classTeacher   User?   @relation("ClassroomTeacher", fields: [classTeacherId], references: [id])
  classTeacherId String? @unique

  createdAt DateTime @default(now())
  lessons   Lesson[]

  @@unique([grade, letter, schoolId])
}

model Subject {
  id       String   @id @default(uuid())
  name     String
  schoolId String
  school   School   @relation(fields: [schoolId], references: [id])
  lessons  Lesson[]
  Grade    Grade[]
}

model Lesson {
  id        String  @id @default(uuid())
  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])

  teacherId String
  teacher   User   @relation("TeacherLessons", fields: [teacherId], references: [id])

  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id])

  dayOfWeek Int
  startTime String? // üü¢ —Ç–æ–≤–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  endTime   String? // üü¢ –∏ —Ç–æ–≤–∞ —Å—ä—â–æ

  createdAt  DateTime     @default(now())
  Grade      Grade[]
  Attendance Attendance[]
}

model Grade {
  id        String   @id @default(uuid())
  value     Int
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String
  lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId  String?
  createdAt DateTime @default(now())
}

model Attendance {
  id        String           @id @default(uuid())
  status    AttendanceStatus
  student   User             @relation(fields: [studentId], references: [id])
  studentId String
  lesson    Lesson           @relation(fields: [lessonId], references: [id])
  lessonId  String
  createdAt DateTime         @default(now())
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum Role {
  PARENT
  STUDENT
  TEACHER
  ADMIN
  SUPERADMIN
}
